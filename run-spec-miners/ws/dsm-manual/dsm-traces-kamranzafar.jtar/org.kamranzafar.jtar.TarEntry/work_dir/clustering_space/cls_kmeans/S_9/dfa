digraph Automata {
rankdir=LR
size="8,5"
	node [shape=star]
	3
	node [shape=doublecircle]
	9
	node [shape=circle]
	7 -> 2 [label="computeCheckSum([B)J"]
	0 -> 8 [label="extractTarHeader(Ljava/lang/String;)V"]
	3 -> 7 [label="writeEntryHeader([B)V"]
	6 -> 8 [label="getName()Ljava/lang/String;"]
	0 -> 0 [label="writeEntryHeader([B)V"]
	1 -> 1 [label="writeEntryHeader([B)V"]
	8 -> 8 [label="writeEntryHeader([B)V"]
	0 -> 0 [label="parseTarHeader([B)V"]
	1 -> 1 [label="getSize()J"]
	8 -> 8 [label="computeCheckSum([B)J"]
	0 -> 0 [label="isDirectory()Z"]
	0 -> 0 [label="getName()Ljava/lang/String;"]
	0 -> 0 [label="computeCheckSum([B)J"]
	1 -> 6 [label="parseTarHeader([B)V"]
	4 -> 5 [label="getSize()J"]
	8 -> 0 [label="getName()Ljava/lang/String;"]
	0 -> 9 [label=<END>]
	8 -> 9 [label=<END>]
	8 -> 8 [label="isDirectory()Z"]
	8 -> 8 [label="extractTarHeader(Ljava/lang/String;)V"]
	5 -> 1 [label="extractTarHeader(Ljava/lang/String;)V"]
	8 -> 8 [label="getSize()J"]
	1 -> 1 [label="isDirectory()Z"]
	1 -> 1 [label="extractTarHeader(Ljava/lang/String;)V"]
	0 -> 0 [label="getSize()J"]
	1 -> 1 [label="computeCheckSum([B)J"]
	2 -> 4 [label="isDirectory()Z"]
	8 -> 8 [label="parseTarHeader([B)V"]
}
