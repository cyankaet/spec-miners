digraph Automata {
rankdir=LR
size="8,5"
	node [shape=star]
	17
	node [shape=doublecircle]
	20
	node [shape=circle]
	1 -> 7 [label="isDirectory()Z"]
	4 -> 10 [label="parseTarHeader([B)V"]
	1 -> 9 [label="extractTarHeader(Ljava/lang/String;)V"]
	9 -> 9 [label="writeEntryHeader([B)V"]
	0 -> 5 [label="computeCheckSum([B)J"]
	15 -> 12 [label="getSize()J"]
	7 -> 7 [label="computeCheckSum([B)J"]
	6 -> 20 [label=<END>]
	10 -> 15 [label="isDirectory()Z"]
	3 -> 10 [label="extractTarHeader(Ljava/lang/String;)V"]
	4 -> 20 [label=<END>]
	0 -> 9 [label="extractTarHeader(Ljava/lang/String;)V"]
	1 -> 5 [label="writeEntryHeader([B)V"]
	1 -> 2 [label="getName()Ljava/lang/String;"]
	10 -> 10 [label="writeEntryHeader([B)V"]
	15 -> 15 [label="computeCheckSum([B)J"]
	7 -> 12 [label="extractTarHeader(Ljava/lang/String;)V"]
	10 -> 10 [label="parseTarHeader([B)V"]
	9 -> 3 [label="getName()Ljava/lang/String;"]
	5 -> 20 [label=<END>]
	1 -> 1 [label="getSize()J"]
	13 -> 13 [label="computeCheckSum([B)J"]
	8 -> 8 [label="computeCheckSum([B)J"]
	3 -> 20 [label=<END>]
	6 -> 5 [label="getSize()J"]
	13 -> 13 [label="isDirectory()Z"]
	8 -> 8 [label="isDirectory()Z"]
	2 -> 2 [label="getName()Ljava/lang/String;"]
	3 -> 4 [label="getName()Ljava/lang/String;"]
	8 -> 15 [label="extractTarHeader(Ljava/lang/String;)V"]
	3 -> 10 [label="writeEntryHeader([B)V"]
	4 -> 1 [label="getSize()J"]
	7 -> 5 [label="getSize()J"]
	9 -> 9 [label="extractTarHeader(Ljava/lang/String;)V"]
	9 -> 9 [label="getSize()J"]
	5 -> 5 [label="parseTarHeader([B)V"]
	10 -> 10 [label="computeCheckSum([B)J"]
	15 -> 15 [label="parseTarHeader([B)V"]
	6 -> 6 [label="writeEntryHeader([B)V"]
	7 -> 7 [label="parseTarHeader([B)V"]
	9 -> 20 [label=<END>]
	13 -> 13 [label="writeEntryHeader([B)V"]
	13 -> 14 [label="parseTarHeader([B)V"]
	8 -> 8 [label="writeEntryHeader([B)V"]
	5 -> 5 [label="computeCheckSum([B)J"]
	11 -> 16 [label="isDirectory()Z"]
	4 -> 4 [label="getName()Ljava/lang/String;"]
	12 -> 12 [label="writeEntryHeader([B)V"]
	3 -> 15 [label="isDirectory()Z"]
	0 -> 5 [label="writeEntryHeader([B)V"]
	6 -> 2 [label="getName()Ljava/lang/String;"]
	10 -> 9 [label="getSize()J"]
	2 -> 6 [label="writeEntryHeader([B)V"]
	4 -> 10 [label="extractTarHeader(Ljava/lang/String;)V"]
	15 -> 15 [label="isDirectory()Z"]
	15 -> 3 [label="getName()Ljava/lang/String;"]
	7 -> 7 [label="isDirectory()Z"]
	5 -> 2 [label="getName()Ljava/lang/String;"]
	8 -> 8 [label="parseTarHeader([B)V"]
	8 -> 2 [label="getName()Ljava/lang/String;"]
	3 -> 10 [label="computeCheckSum([B)J"]
	10 -> 10 [label="extractTarHeader(Ljava/lang/String;)V"]
	0 -> 5 [label="parseTarHeader([B)V"]
	5 -> 5 [label="writeEntryHeader([B)V"]
	6 -> 10 [label="extractTarHeader(Ljava/lang/String;)V"]
	4 -> 10 [label="computeCheckSum([B)J"]
	18 -> 13 [label="extractTarHeader(Ljava/lang/String;)V"]
	15 -> 15 [label="extractTarHeader(Ljava/lang/String;)V"]
	4 -> 15 [label="isDirectory()Z"]
	12 -> 12 [label="parseTarHeader([B)V"]
	2 -> 1 [label="getSize()J"]
	14 -> 15 [label="getName()Ljava/lang/String;"]
	6 -> 6 [label="computeCheckSum([B)J"]
	0 -> 2 [label="getName()Ljava/lang/String;"]
	2 -> 6 [label="parseTarHeader([B)V"]
	2 -> 8 [label="isDirectory()Z"]
	1 -> 5 [label="parseTarHeader([B)V"]
	2 -> 6 [label="computeCheckSum([B)J"]
	1 -> 20 [label=<END>]
	0 -> 0 [label="getSize()J"]
	2 -> 20 [label=<END>]
	6 -> 6 [label="parseTarHeader([B)V"]
	8 -> 5 [label="getSize()J"]
	5 -> 5 [label="getSize()J"]
	15 -> 15 [label="writeEntryHeader([B)V"]
	12 -> 12 [label="computeCheckSum([B)J"]
	12 -> 3 [label="getName()Ljava/lang/String;"]
	16 -> 18 [label="getSize()J"]
	9 -> 9 [label="parseTarHeader([B)V"]
	7 -> 7 [label="writeEntryHeader([B)V"]
	19 -> 11 [label="computeCheckSum([B)J"]
	10 -> 20 [label=<END>]
	2 -> 10 [label="extractTarHeader(Ljava/lang/String;)V"]
	12 -> 12 [label="isDirectory()Z"]
	0 -> 20 [label=<END>]
	10 -> 3 [label="getName()Ljava/lang/String;"]
	12 -> 12 [label="extractTarHeader(Ljava/lang/String;)V"]
	0 -> 7 [label="isDirectory()Z"]
	9 -> 9 [label="computeCheckSum([B)J"]
	3 -> 10 [label="parseTarHeader([B)V"]
	4 -> 10 [label="writeEntryHeader([B)V"]
	5 -> 9 [label="extractTarHeader(Ljava/lang/String;)V"]
	17 -> 19 [label="writeEntryHeader([B)V"]
	12 -> 12 [label="getSize()J"]
	6 -> 8 [label="isDirectory()Z"]
	9 -> 12 [label="isDirectory()Z"]
	1 -> 5 [label="computeCheckSum([B)J"]
	13 -> 13 [label="extractTarHeader(Ljava/lang/String;)V"]
	13 -> 13 [label="getSize()J"]
	5 -> 7 [label="isDirectory()Z"]
	7 -> 2 [label="getName()Ljava/lang/String;"]
	3 -> 0 [label="getSize()J"]
}
