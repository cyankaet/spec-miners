Warning: start and accepting states of pattern "(ab*c)*" overlap. This may cause a significant number of unintuitive matches against the empty string.  Consider using a "+"-closed version of the pattern instead.
Warning: pattern "(ab*c)*" accepts at least one string [""] that does not contain all of its letters.  Consider rewriting the property to meet this constraint to avoid spurious matches.
Avg. time per line: 0.01ms, 10443509 lines remaining.  ETA: 0h 1m 19s
Avg. time per line: 0.01ms, 9283120 lines remaining.  ETA: 0h 1m 10s
Avg. time per line: 0.01ms, 8122731 lines remaining.  ETA: 0h 1m 1s
Avg. time per line: 0.01ms, 6962342 lines remaining.  ETA: 0h 0m 52s
Avg. time per line: 0.01ms, 5801953 lines remaining.  ETA: 0h 0m 43s
Avg. time per line: 0.01ms, 4641564 lines remaining.  ETA: 0h 0m 34s
Avg. time per line: 0.01ms, 3481175 lines remaining.  ETA: 0h 0m 25s
Avg. time per line: 0.01ms, 2320786 lines remaining.  ETA: 0h 0m 17s
Avg. time per line: 0.01ms, 1160397 lines remaining.  ETA: 0h 0m 8s
Avg. time per line: 0.01ms, 8 lines remaining.  ETA: 0h 0m 0s
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.ArrayList.size()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaanier.decode()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.size()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaanier.decode()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.ArrayList.size()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaanier.decode()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.util.ArrayList.size()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaanier.decode()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.array()[B
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.array()[B
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.flush()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.array()[B
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.ArrayList.size()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaanier.decode()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.ArrayList.size()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.size()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaanier.decode()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaanier.decode()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.ArrayList.size()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaanier.decode()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.size()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaanier.decode()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readFully([BII)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.array()[B
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.array()[B
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.OutputStream.flush()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.array()[B
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.ArrayList.size()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaanier.decode()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.size()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaanier.decode()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.array()[B
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.OutputStream.flush()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.array()[B
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.flush()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.ArrayList.size()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaanier.decode()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.size()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaanier.decode()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.array()[B
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.OutputStream.flush()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.capacity()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.capacity()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.zip.Checksumfy()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.Buffer.position()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksumfy()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.zip.Checksumfy()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.Buffer.position()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.util.zip.Checksumfy()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.util.zip.Checksum.getValue()J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.capacity()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.capacity()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.zip.Checksumfy()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.Buffer.position()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.zip.Checksum.getValue()J
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksumfy()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.position()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksumfy()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.Buffer.position()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksum.getValue()J
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.zip.Checksumfy()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.Buffer.position()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.zip.Checksum.getValue()J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksumfy()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.Buffer.position()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksum.getValue()J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.zip.Checksumfy()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.position()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.Buffer.position()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksumfy()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.Buffer.position()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksumfy()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.position()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.Buffer.position()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksumfy()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.ArrayList.size()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaanier.decode()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.size()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaanier.decode()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.ArrayList.size()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaanier.decode()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.size()I
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.size()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.util.ArrayList.size()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaanier.decode()V
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaanier.decode()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.tukaanier.decode()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.array()[B
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.array()[B
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readFully([BII)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.array()[B
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.array()[B
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.util.ArrayList.size()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaanier.decode()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.ArrayList.size()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.ArrayList.size()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaanier.decode()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaanier.decode()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.util.ArrayList.size()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaanier.decode()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.ArrayList.size()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaanier.decode()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.array()[B
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.array()[B
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.OutputStream.flush()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.array()[B
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.size()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaanier.decode()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.ArrayList.size()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaanier.decode()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.array()[B
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.OutputStream.flush()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.capacity()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.capacity()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.zip.Checksumfy()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.Buffer.position()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.zip.Checksum.getValue()J
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksumfy()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.Buffer.position()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksum.getValue()J
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.zip.Checksumfy()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.Buffer.position()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.zip.Checksum.getValue()J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksumfy()V
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksumfy()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.Buffer.position()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.util.zip.Checksumfy()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksum.getValue()J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.util.zip.Checksum.getValue()J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.capacity()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.capacity()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.util.zip.Checksumfy()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.util.zip.Checksum.getValue()J
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksumfy()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.position()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.zip.Checksumfy()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.Buffer.position()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.util.zip.Checksumfy()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.util.zip.Checksum.getValue()J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.zip.Checksumfy()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.Buffer.position()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.Buffer.position()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.Buffer.position()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksumfy()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksumfy()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.position()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.Buffer.position()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.ArrayList.size()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaanier.decode()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.size()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaanier.decode()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.array()[B
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.OutputStream.flush()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.array()[B
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.flush()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.ArrayList.size()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaanier.decode()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.util.ArrayList.size()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.lzma.State.isLiteral()Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.lzma.State.get()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaanier.decode()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.size()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaanier.decode()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.array()[B
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.OutputStream.flush()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.nio.ByteBuffer.array()[B
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.io.OutputStream.flush()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.ArrayList.size()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.ArrayList.size()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaanier.decode()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaanier.decode()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.util.ArrayList.size()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaanier.decode()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.ArrayList.size()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaanier.decode()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.size()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaanier.decode()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.array()[B
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.array()[B
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.array()[B
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.flush()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.ArrayList.size()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaanier.decode()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.size()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.size()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaanier.decode()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaanier.decode()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.ArrayList.size()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaanier.decode()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.size()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.ArrayList.size()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaanier.decode()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaanier.decode()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.array()[B
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.array()[B
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.array()[B
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readFully([BII)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.OutputStream.flush()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.capacity()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.capacity()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.zip.Checksumfy()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.position()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.Buffer.position()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.zip.Checksum.getValue()J
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksumfy()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.capacity()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.getByte(I)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.Buffer.position()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksumfy()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.position()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.Buffer.position()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksum.getValue()J
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.apache.commons.compress.archivers.zip.ZipArchiveInputStr.getSubcoderIndex(II)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.util.zip.Checksumfy()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.nio.Buffer.position()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksumfy()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.getByte(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.capacity()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.capacity()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.zip.Checksumfy()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.zip.Checksumfy()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.Buffer.position()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.util.zip.Checksumfy()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.zip.Checksumfy()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.Buffer.position()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksumfy()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.position()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.capacity()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.capacity()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.zip.Checksumfy()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.Buffer.position()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksumfy()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksumfy()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.Buffer.position()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.zip.Checksumfy()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.Buffer.position()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.zip.Checksum.getValue()J
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksumfy()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.Buffer.position()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksumfy()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.position()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksum.getValue()J
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksum.getValue()J
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.util.ArrayList.size()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.lzma.State.isLiteral()Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.lzma.State.get()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaanier.decode()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.size()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaanier.decode()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.io.InputStream.read()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.nio.ByteBuffer.array()[B
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.io.OutputStream.flush()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.ArrayList.size()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaanier.decode()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.array()[B
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.OutputStream.flush()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.ArrayList.size()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.ArrayList.size()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaanier.decode()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaanier.decode()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.size()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.size()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.util.ArrayList.size()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaanier.decode()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaanier.decode()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.tukaanier.decode()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.ArrayList.size()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaanier.decode()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.size()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaanier.decode()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.array()[B
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.array()[B
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.array()[B
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.array()[B
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.util.ArrayList.size()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaanier.decode()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.ArrayList.size()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.ArrayList.size()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaanier.decode()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaanier.decode()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.util.ArrayList.size()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaanier.decode()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.ArrayList.size()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.ArrayList.size()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaanier.decode()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaanier.decode()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.array()[B
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.array()[B
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.array()[B
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.OutputStream.flush()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.lz.LZDecoder.getByte(I)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.Buffer.position()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.Buffer.position()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.apache.commons.compress.archivers.zip.ZipArchiveInputStr.getSubcoderIndex(II)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.util.zip.Checksumfy()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.nio.Buffer.position()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksumfy()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.capacity()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksumfy()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.position()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.Buffer.position()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksum.getValue()J
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.capacity()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.zip.Checksumfy()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.zip.Checksumfy()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.Buffer.position()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksumfy()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksumfy()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.Buffer.position()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.util.zip.Checksumfy()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.zip.Checksumfy()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.Buffer.position()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.zip.Checksum.getValue()J
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksumfy()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.Buffer.position()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksum.getValue()J
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.capacity()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.capacity()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.util.zip.Checksumfy()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.zip.Checksumfy()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.zip.Checksumfy()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.Buffer.position()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.util.zip.Checksumfy()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.util.zip.Checksum.getValue()J
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.zip.Checksumfy()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.Buffer.position()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksumfy()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.position()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksum.getValue()J
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.remaining()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.remaining()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.remaining()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.Buffer.limit()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.Buffer.limit()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.hasSpace()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.read([BII)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.io.InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.remaining()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.limit()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.Buffer.limit()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.remaining()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.Buffer.limit()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.InputStream.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.read([BII)I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.hasSpace()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.read([BII)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.skip(J)J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.limit()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.Buffer.limit()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.skip(J)J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.remaining()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.Buffer.limit()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.hasSpace()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.Buffer.limit()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.skip(J)J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.limit()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.Buffer.limit()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.hasSpace()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readInt()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readInt()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readInt()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.io.DataInputStream.readInt()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.OutputStream.write([BII)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.close()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = ogeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.write([BII)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksum.update(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.close()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.OutputStream.write([BII)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.close()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.io.InputStream.close()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readInt()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readInt()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readInt()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readInt()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readInt()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.OutputStream.write([BII)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.InputStream.close()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = ogeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.OutputStream.write([BII)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.OutputStream.write([BII)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksum.update(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.close()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.close()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.OutputStream.write([BII)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.InputStream.close()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.OutputStream.write([BII)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.close()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readInt()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readInt()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = ogeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.OutputStream.write([BII)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.OutputStream.write([BII)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.close()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = ogeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.write([BII)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksum.update(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.close()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readInt()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readInt()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.OutputStream.write([BII)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = ogeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.OutputStream.write([BII)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.OutputStream.write([BII)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksum.update(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.close()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.close()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.remaining()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.Buffer.limit()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.remaining()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.Buffer.limit()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.tukaani.xz.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.read([BII)I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.read([BII)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.read([BII)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.io.InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.remaining()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.remaining()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.limit()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.Buffer.limit()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.remaining()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.Buffer.limit()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.InputStream.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.read([BII)I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.read([BII)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.Buffer.limit()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.Buffer.limit()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.Buffer.limit()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.skip(J)J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.remaining()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.limit()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.Buffer.limit()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readInt()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readInt()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readInt()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readInt()I
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readInt()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.io.DataInputStream.readInt()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.OutputStream.write([BII)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.close()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.OutputStream.write([BII)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.close()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.OutputStream.write([BII)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.close()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.OutputStream.write([BII)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.close()V
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.close()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.io.InputStream.close()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.DataInputStream.readInt()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readInt()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readInt()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.DataInputStream.readInt()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readInt()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.OutputStream.write([BII)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.InputStream.close()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = ogeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.OutputStream.write([BII)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.OutputStream.write([BII)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksum.update(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.close()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.close()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.OutputStream.write([BII)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.InputStream.close()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.OutputStream.write([BII)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.close()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readInt()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.OutputStream.write([BII)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.OutputStream.write([BII)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.close()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readInt()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.OutputStream.write([BII)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = ogeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.OutputStream.write([BII)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.OutputStream.write([BII)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksum.update(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.close()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.remaining()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.read([BII)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.limit()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.remaining()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.read([BII)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.read([BII)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.read([BII)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.hasSpace()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.read([BII)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.remaining()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.read([BII)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.limit()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.io.InputStream.skip(J)J
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.nio.ByteBuffer.remaining()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.read([BII)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.nio.Buffer.limit()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.read([BII)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.hasSpace()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.hasSpace()Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.io.InputStream.read([BII)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.InputStream.read([BII)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.read([BII)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.remaining()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.Buffer.limit()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.Buffer.limit()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.remaining()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.read([BII)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.remaining()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.Buffer.limit()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.hasSpace()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.io.InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.read([BII)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.Buffer.limit()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.remaining()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.Buffer.limit()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.remaining()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.remaining()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.read([BII)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.Buffer.limit()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.hasSpace()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.InputStream.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.read([BII)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.read([BII)I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readInt()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readInt()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = ogeDecoder.normalize()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.OutputStream.write([BII)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.OutputStream.write([BII)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.close()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = ogeDecoder.normalize()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.write([BII)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksum.update(I)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.close()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readInt()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.io.DataInputStream.readInt()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readInt()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.OutputStream.write([BII)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = ogeDecoder.normalize()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.OutputStream.write([BII)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.OutputStream.write([BII)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksum.update(I)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.close()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.getPos()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = ogeDecoder.normalize()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.io.OutputStream.write([BII)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.util.zip.Checksum.update(I)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.io.InputStream.close()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.close()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.State.updateMatch()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readInt()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readInt()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.io.DataInputStream.readInt()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.DataInputStream.readInt()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.DataInputStream.readInt()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.OutputStream.write([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.close()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.close()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.getPos()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = java.io.InputStream.close()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.get()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = java.io.InputStream.close()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.isReadOnly()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = ogeDecoder.normalize()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.OutputStream.write([BII)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.io.InputStream.close()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.isLiteral()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readInt()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readInt()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readInt()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.DataInputStream.readInt()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readInt()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.DataInputStream.readInt()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.OutputStream.write([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.InputStream.close()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.getPos()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.OutputStream.write([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.close()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.close()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = java.io.InputStream.close()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.array()[B
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = ogeDecoder.normalize()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.OutputStream.write([BII)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.close()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.io.InputStream.close()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateLiteral()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.io.InputStream.skip(J)J
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.nio.ByteBuffer.remaining()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.read([BII)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.nio.Buffer.limit()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.lz.LZDecoder.hasSpace()Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.io.InputStream.read([BII)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.read([BII)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.read([BII)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.remaining()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.read([BII)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.limit()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.read([BII)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.read([BII)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.Buffer.limit()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.remaining()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.Buffer.limit()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.tukaani.xz.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.remaining()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.io.InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.read([BII)I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.Buffer.limit()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.remaining()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.Buffer.limit()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.remaining()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.remaining()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.read([BII)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.Buffer.limit()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.InputStream.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.read([BII)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.read([BII)I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.io.DataInputStream.readInt()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readInt()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.OutputStream.write([BII)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.OutputStream.write([BII)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.lz.LZDecoder.getPos()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = ogeDecoder.normalize()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.io.OutputStream.write([BII)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.util.zip.Checksum.update(I)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.io.InputStream.close()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.close()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readInt()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.OutputStream.write([BII)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = ogeDecoder.normalize()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.OutputStream.write([BII)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.OutputStream.write([BII)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksum.update(I)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.close()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readInt()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readInt()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readInt()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readInt()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.io.DataInputStream.readInt()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.DataInputStream.readInt()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readInt()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.OutputStream.write([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.close()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.close()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.OutputStream.write([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.close()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.close()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = java.io.InputStream.close()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = java.io.InputStream.close()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.capacity()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.close()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.DataInputStream.readInt()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readInt()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readInt()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.DataInputStream.readInt()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readInt()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.DataInputStream.readInt()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.OutputStream.write([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.InputStream.close()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.OutputStream.write([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.close()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.close()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = java.io.InputStream.close()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.Buffer.position()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = ogeDecoder.normalize()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.OutputStream.write([BII)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.close()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.io.InputStream.close()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.util.ArrayList.size()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.tukaanier.decode()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.ArrayList.size()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaanier.decode()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.ArrayList.size()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaanier.decode()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.ArrayList.size()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaanier.decode()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.ArrayList.size()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaanier.decode()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.array()[B
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.array()[B
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.ArrayList.size()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaanier.decode()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.array()[B
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.OutputStream.flush()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.ArrayList.size()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaanier.decode()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.util.zip.Checksumfy()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.util.zip.Checksum.getValue()J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.capacity()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.capacity()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.zip.Checksumfy()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.Buffer.position()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.zip.Checksum.getValue()J
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.zip.Checksumfy()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.Buffer.position()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.zip.Checksum.getValue()J
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.zip.Checksumfy()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.Buffer.position()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.zip.Checksum.getValue()J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.zip.Checksumfy()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.Buffer.position()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.zip.Checksum.getValue()J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.lz.LZDecoder.getByte(I)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.zip.Checksumfy()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.position()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.Buffer.position()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.Buffer.position()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.zip.Checksumfy()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.ArrayList.size()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaanier.decode()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.ArrayList.size()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaanier.decode()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.ArrayList.size()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaanier.decode()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = java.util.ArrayList.size()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = org.tukaanier.decode()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.array()[B
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readFully([BII)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.array()[B
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.OutputStream.flush()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.array()[B
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.size()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.util.ArrayList.size()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.isLiteral()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaanier.decode()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.isLiteral()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaanier.decode()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.ArrayList.size()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.ArrayList.size()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaanier.decode()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaanier.decode()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.util.ArrayList.size()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.isLiteral()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.isLiteral()Z
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaanier.decode()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.ArrayList.size()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaanier.decode()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.array()[B
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.flush()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.DataInputStream.readFully([BII)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.array()[B
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.array()[B
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.OutputStream.flush()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.array()[B
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.ArrayList.size()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaanier.decode()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.array()[B
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.OutputStream.flush()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.size()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.isLiteral()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaanier.decode()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.isLiteral()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.ArrayList.size()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaanier.decode()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.isLiteral()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.isLiteral()Z
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.array()[B
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.flush()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.array()[B
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.OutputStream.flush()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.zip.Checksumfy()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.Buffer.position()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.zip.Checksum.getValue()J
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksumfy()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.position()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.zip.Checksumfy()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.Buffer.position()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.zip.Checksum.getValue()J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = java.util.zip.Checksumfy()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = java.util.zip.Checksum.getValue()J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.capacity()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.capacity()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksumfy()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.util.zip.Checksumfy()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.util.zip.Checksum.getValue()J
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.zip.Checksumfy()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.position()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.zip.Checksumfy()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.Buffer.position()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.util.zip.Checksumfy()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.util.zip.Checksum.getValue()J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.zip.Checksumfy()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.Buffer.position()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.Buffer.position()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksumfy()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.position()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksumfy()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.zip.Checksumfy()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.position()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.Buffer.position()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.util.ArrayList.size()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.lzma.State.isLiteral()Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.lzma.State.get()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaanier.decode()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.io.InputStream.read()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.nio.ByteBuffer.array()[B
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.io.OutputStream.flush()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.util.ArrayList.size()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.tukaanier.decode()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.ArrayList.size()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaanier.decode()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.ArrayList.size()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.ArrayList.size()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaanier.decode()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaanier.decode()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.ArrayList.size()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaanier.decode()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.ArrayList.size()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaanier.decode()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.array()[B
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.array()[B
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.lz.LZDecoder.getByte(I)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.apache.commons.compress.archivers.zip.ZipArchiveInputStr.getSubcoderIndex(II)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.util.zip.Checksumfy()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.nio.Buffer.position()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.Buffer.position()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.Buffer.position()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.getByte(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.util.zip.Checksumfy()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.capacity()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.zip.Checksumfy()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.Buffer.position()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.zip.Checksumfy()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.zip.Checksumfy()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.Buffer.position()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.zip.Checksumfy()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.Buffer.position()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.zip.Checksum.getValue()J
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.zip.Checksumfy()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.Buffer.position()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.zip.Checksum.getValue()J
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.ArrayList.size()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaanier.decode()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.util.ArrayList.size()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.lzma.State.isLiteral()Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.lzma.State.get()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaanier.decode()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.array()[B
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.OutputStream.flush()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.io.InputStream.read()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.nio.ByteBuffer.array()[B
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.io.OutputStream.flush()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.size()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.isLiteral()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaanier.decode()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.isLiteral()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.ArrayList.size()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.ArrayList.size()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaanier.decode()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaanier.decode()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.isLiteral()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.ArrayList.size()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaanier.decode()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.array()[B
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.flush()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.array()[B
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.OutputStream.flush()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.array()[B
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.ArrayList.size()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaanier.decode()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.ArrayList.size()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaanier.decode()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.ArrayList.size()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaanier.decode()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.array()[B
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.array()[B
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.array()[B
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readFully([BII)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.OutputStream.flush()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.util.ArrayList.size()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.isLiteral()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.isLiteral()Z
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.isLiteral()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.get()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaanier.decode()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.ArrayList.size()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.ArrayList.size()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.ArrayList.size()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaanier.decode()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaanier.decode()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaanier.decode()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.size()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.isLiteral()Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeRepMatch(I)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaanier.decode()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.LZMA2InputStream.decodeChunkHeader()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.ArrayList.size()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.isReadOnly()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(I)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaanier.decode()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.array()[B
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.array()[B
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readFully([BII)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.OutputStream.flush()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([Limit(I)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.array()[B
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLiteral()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readFully([BII)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodeMatch(I)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.write(Ljava/nio/ByteBuffer;)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.flush()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.Buffer.limit(I)Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.LZMA2InputStream.reacoder.repeatPending()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.array()[B
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readFully([BII)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.lzma.LZMADecoder.decodg.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.capacity()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.lz.LZDecoder.getByte(I)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.Buffer.position()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksumfy()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.position()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksum.getValue()J
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.apache.commons.compress.archivers.zip.ZipArchiveInputStr.getSubcoderIndex(II)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.util.zip.Checksumfy()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.nio.Buffer.position()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.capacity()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.capacity()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.capacity()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksumfy()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksum.getValue()J
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.zip.Checksumfy()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.position()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.zip.Checksumfy()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.Buffer.position()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.zip.Checksum.getValue()J
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.zip.Checksumfy()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.capacity()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.zip.Checksumfy()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.Buffer.position()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.zip.Checksumfy()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.Buffer.position()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.zip.Checksum.getValue()J
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksumfy()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.position()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksum.getValue()J
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.getByte(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.capacity()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.capacity()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.repeat(II)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.capacity()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.WritableBufferedByteChannel.countBufferOverflows()J
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position(I)Ljava/nio/Buffer;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(I)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.compress.utils.ChecksumVerifyingInputStream.verify()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.capacity()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.prepareInputBuffer(Ljava/io/DataInputStream;I)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.aporg.tukaani.xz.LZMA2InputStream.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.repeatPending()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.util.zip.Checksumfy()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.zip.Checksumfy()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.position()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.zip.Checksumfy()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.zip.Checksumfy()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.Buffer.position()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.zip.Checksum.getValue()J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.zip.Checksum.getValue()J
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksumfy()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADrangecoder.RangeDecoder.decodeBit([SI)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.position()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.flush([BI)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksum.getValue()J
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.flip()Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.zip.Checksumfy()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.Buffer.position()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.zip.Checksum.getValue()J
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoderFromBuffer.isFinished()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.tukaani.xz.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.io.InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.remaining()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.Buffer.limit()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.remaining()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.Buffer.limit()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.InputStream.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.read([BII)I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.read([BII)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.remaining()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.limit()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.InputStream.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.lz.LZDecoder.hasSpace()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.Buffer.limit()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.Buffer.limit()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.io.DataInputStream.readInt()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.io.InputStream.close()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.DataInputStream.readInt()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readInt()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.DataInputStream.readInt()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readInt()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.OutputStream.write([BII)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.InputStream.close()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.OutputStream.write([BII)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeDirectBits(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.close()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.OutputStream.write([BII)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.InputStream.close()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.OutputStream.write([BII)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.close()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readInt()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = ogeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.OutputStream.write([BII)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.InputStream.close()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.lz.LZDecoder.getPos()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.normalize()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readInt()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.OutputStream.write([BII)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.OutputStream.write([BII)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.close()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.isOpen()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LengthDecoder.decode(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.remaining()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.limit()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.Buffer.limit()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = org.tukaani.xz.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.InputStream.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.hasSpace()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.InputStream.read([BII)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = java.io.InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.remaining()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.remaining()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.limit()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.Buffer.limit()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.remaining()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.Buffer.limit()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.hasSpace()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.InputStream.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.read([BII)I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.read([BII)I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.read([BII)I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.read([BII)I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.Buffer.limit()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.skip(J)J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.remaining()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.limit()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.hasSpace()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.skip(J)J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.Buffer.limit()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.skip(J)J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.remaining()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.limit()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.Buffer.limit()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.hasSpace()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.read([BII)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readInt()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readInt()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readInt()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = java.io.DataInputStream.readInt()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.OutputStream.write([BII)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.InputStream.close()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = ogeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.OutputStream.write([BII)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksum.update(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.close()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.OutputStream.write([BII)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.InputStream.close()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = java.io.InputStream.close()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readInt()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.DataInputStream.readInt()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readInt()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readInt()I
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.DataInputStream.readInt()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readInt()I
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = ogeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.write([BII)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksum.update(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.close()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.State.isLiteral()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.InputStream.close()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = ogeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.OutputStream.write([BII)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.OutputStream.write([BII)V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.close()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.close()V
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.State.get()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.isReadOnly()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.State.updateLiteral()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.InputStream.close()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.OutputStream.write([BII)V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.setLimit(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.array()[B
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.close()V
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.OutputStream.flush()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readInt()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.OutputStream.write([BII)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = ogeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.OutputStream.write([BII)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksum.update(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.close()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readInt()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readInt()I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = ogeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.write([BII)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksum.update(I)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.close()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = ogeDecoder.normalize()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.OutputStream.write([BII)V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.OutputStream.write([BII)V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.close()V
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.getByte(I)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.capacity()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.position(I)Ljava/nio/Buffer;
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.flush([BI)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.repeatPending()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.position()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.io.InputStream.skip(J)J
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.nio.ByteBuffer.remaining()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.read([BII)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.nio.Buffer.limit()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.lz.LZDecoder.hasSpace()Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.io.InputStream.read([BII)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.read([BII)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.tukaani.xz.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.io.InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.Buffer.limit()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.remaining()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.Buffer.limit()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.remaining()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.InputStream.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.read([BII)I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.io.DataInputStream.readInt()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.lz.LZDecoder.getPos()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = ogeDecoder.normalize()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.io.OutputStream.write([BII)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.util.zip.Checksum.update(I)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.io.InputStream.close()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.ArchiveInputStream.count(J)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.OutputStream.write([BII)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.OutputStream.write([BII)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.State.updateMatch()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.io.DataInputStream.readInt()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.io.InputStream.skip(J)J
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = java.io.InputStream.close()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.nio.Buffer.limit()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.DataInputStream.readInt()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readInt()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readInt()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.DataInputStream.readInt()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readInt()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.OutputStream.write([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.InputStream.close()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.OutputStream.write([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.close()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.close()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = java.io.InputStream.close()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.arrayOffset()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.close()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.hasArray()Z
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.remaining()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.read([BII)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.limit()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.io.InputStream.skip(J)J
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.nio.ByteBuffer.remaining()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.read([BII)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.nio.Buffer.limit()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.read([BII)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.hasSpace()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.lz.LZDecoder.hasSpace()Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.io.InputStream.read([BII)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.InputStream.read([BII)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.remaining()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.read([BII)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.remaining()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.read([BII)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.limit()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.remaining()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.read([BII)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.read([BII)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.hasSpace()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.read([BII)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.read([BII)I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.read([BII)I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.Buffer.limit()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.read([BII)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.remaining()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.Buffer.limit()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.hasSpace()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.InputStream.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.read([BII)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBit([SI)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.Buffer.limit()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.skip(J)J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.remaining()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.remaining()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.read([BII)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.Buffer.limit()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.Buffer.limit()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.read([BII)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeReverseBitTree([S)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.remaining()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateLongRep()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.Buffer.limit()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readUnsignedByte()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.util.ArrayList.remove(I)Ljava/lang/Object;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.remaining()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readUnsignedShort()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.LZMADecoder.decode()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.hasSpace()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.read([BII)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.read([BII)I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = orer$LiteralDecoder$LiteralSubdecoder.decode()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.read([BII)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.write(Ljava/nio/ByteBuffer;Z)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateMatch()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lzma.State.updateShortRep()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.channels.SeekableByteChannel.read(Ljava/nio/ByteBuffer;)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.readsumVerifyingInputStream.read()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.arrayOffset()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.read([BII)I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInput
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readInt()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.io.DataInputStream.readInt()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.OutputStream.write([BII)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = ogeDecoder.normalize()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.OutputStream.write([BII)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksum.update(I)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.close()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.lz.LZDecoder.getPos()I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = ogeDecoder.normalize()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.io.OutputStream.write([BII)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.util.zip.Checksum.update(I)V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.io.InputStream.close()V
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.LZMA2InputStream.read([BII)I
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readInt()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readInt()I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readInt()I
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readInt()I
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = ogeDecoder.normalize()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.write([BII)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksum.update(I)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.close()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = ogeDecoder.normalize()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.OutputStream.write([BII)V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.OutputStream.write([BII)V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.close()V
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.InputStream.skip(J)J
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.close()V
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.Buffer.limit()I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.close()V
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder.decode()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.nio.ByteBuffer.arrayOffset()I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readInt()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.DataInputStream.readInt()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.DataInputStream.readInt()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.OutputStream.write([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.InputStream.close()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.getPos()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = java.io.InputStream.close()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = ogeDecoder.normalize()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.OutputStream.write([BII)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.io.InputStream.close()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.LZMA2InputStream.read([BII)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.DataInputStream.readInt()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.DataInputStream.readInt()I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readInt()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readInt()I
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.range.xz.rangecoder.RangeDecoder.normalize()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.putByte(B)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.DataInputStream.readInt()I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.concurrent.atomic.AtomicLong.get()J
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.rewind()Ljava/nio/Buffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.commons.compress.utils.ChecksumVerifyingInputStreaz.LZDecoder.repeat(II)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.DataInputStream.readInt()I
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.ier.RangeDecoder.normalize()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.getPos()I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.util.zip.Checksum.update(I)V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lz.LZDecoder.putByte(B)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder.getSubcoderIndex(II)I
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = java.io.InputStream.close()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.io.OutputStream.write([BII)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = ogeDecoder.normalize()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.OutputStream.write([BII)V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.OutputStream.write([BII)V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.io.InputStream.close()V
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = java.nio.ByteBuffer.hasArray()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.close()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.util.zip.Checksum.update(I)V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.tukaani.xz.LZMA2InputStream.read([BII)I
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.writeImpl(Ljava/nio/ByteBuffer;)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.close()V
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = org.apache.maven.surefire.api.util.internal.AbstractNoninterruptibleWritableChannel.flushImpl()V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = ogeDecoder.normalize()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.OutputStream.write([BII)V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.io.InputStream.close()V
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = java.nio.ByteBuffer.hasArray()Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.rangecoder.RangeDecoder.decodeBitTree([S)I
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = org.tukaani.xz.lzma.LZMADecoder$LiteralDecoder$LiteralSubdecoder.decode()V
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.util.zip.Checksum.update(I)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.nio.ByteBuffer.get([BII)Ljava/nio/ByteBuffer;
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.rangecoder.RangeDecoder.n)Z
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = java.io.InputStream.close()V
  c = java.io.OutputStream.write([BII)V
Pattern: (ab*c)*
  a = java.nio.ByteBuffer.hasArray()Z
  b = org.tukaani.xz.lz.LZDecoder.hasPending()Z
  c = java.io.OutputStream.write([BII)V
Found 14938 matching assignments.
